import bz2
import TenhouDecoder


def extract_bz2(hex_str: str):
    if hex_str.startswith("0x"):
        hex_str = hex_str[2:]

    compressed = bytes.fromhex(hex_str)
    decompressed = bz2.decompress(compressed).decode()

    return TenhouDecoder.GameData(decompressed)


class DiscardedTile(TenhouDecoder.JsonSerializable):
    def __init__(self, tile: TenhouDecoder.Tile, discard_type: int):
        self.tile = tile
        self.discard_type = discard_type  # 0 = tedashi, 1 = tsumogiri


class Meld(TenhouDecoder.JsonSerializable):
    def __init__(self, tiles: list[TenhouDecoder.Tile]):
        self.tiles = tiles


class PlayerState(TenhouDecoder.JsonSerializable):
    def __init__(self, starting_hand: list[TenhouDecoder.Tile], is_oya: bool, global_score: int):
        self.closed_hand = sorted(starting_hand)
        self.melds: list[Meld] = []

        self.is_rii = False
        self.discard_pool: list[DiscardedTile] = []
        self.hand_is_open = False

        self.is_oya = is_oya
        self.global_score = global_score

    def draw_tile(self, tile: TenhouDecoder.Tile):
        self.closed_hand.append(tile)

    def discard_tile(self, tile: TenhouDecoder.Tile):
        # Tile should always be in current hand
        idx = self.closed_hand.index(tile)
        self.closed_hand.pop(idx)
        self.discard_pool.append(DiscardedTile(tile, int(idx == len(self.closed_hand))))
        self.closed_hand.sort()

    def riichi(self):
        self.is_rii = True

    def call(self, meld: TenhouDecoder.ChiiMeld | TenhouDecoder.PonMeld | TenhouDecoder.KanMeld):
        removed_tiles = 0
        for i in meld.tiles:
            if i in self.closed_hand:
                self.closed_hand.remove(i)
                removed_tiles += 1

        match meld.call_type:
            case "chi":
                assert removed_tiles == 2
                self.melds.append(Meld(meld.tiles))
                self.hand_is_open = True
            case "pon":
                assert removed_tiles == 2
                self.melds.append(Meld(meld.tiles))
                self.hand_is_open = True
            case "shouminkan":
                assert removed_tiles == 1
                # Find the pon
                for i in range(len(self.melds)):
                    if self.melds[i].tiles[0].tile == meld.tiles[0].tile_num:
                        self.melds[i] = Meld(meld.tiles)
                        break
                else:
                    raise Exception("Could not find shouminkan call group")
                self.hand_is_open = True
            case "daiminkan":
                assert removed_tiles == 3
                self.melds.append(Meld(meld.tiles))
                self.hand_is_open = True
            case "ankan":
                assert removed_tiles == 4
                self.melds.append(Meld(meld.tiles))


class RoundState(TenhouDecoder.JsonSerializable):
    def __init__(self, round_data: TenhouDecoder.Round, global_scores: list[int]):
        self.round_no = round_data.round_no.round_no
        self.honba_count = round_data.honba_count
        self.rii_sticks = round_data.rii_sticks

        self.tiles_left = 70
        self.dora_indicators = []

        self.players = [PlayerState(round_data.starting_hands[i], i == round_data.oya, global_scores[i]) for i in
                        range(4)]

    def draw_tile(self, ev: TenhouDecoder.DrawTileEvent):
        self.players[ev.player].draw_tile(ev.tile)
        self.tiles_left -= 1

    def discard_tile(self, ev: TenhouDecoder.DiscardTileEvent):
        self.players[ev.player].discard_tile(ev.tile)

    def riichi(self, ev: TenhouDecoder.DiscardTileEvent):
        self.players[ev.player].riichi()

    def dora(self, ev: TenhouDecoder.DiscardTileEvent):
        # TODO - make this just get the dora instead
        self.dora_indicators.append(ev.tile)

    def call(self, ev: TenhouDecoder.CallTileEvent):
        self.players[ev.player].call(ev.meld)


class GameState:
    def __init__(self, data: TenhouDecoder.GameData):
        self.data = data
        self.rounds = data.rounds
        self.current_round: RoundState | None = None

        # Everyone starts off with 25k
        self.scores = [250 for _ in range(4)]

        self.round_no = -1
        self.event_no = 0

    def next_round(self):
        if self.current_round is not None:
            self.scores = [self.rounds[self.round_no].score_changes[i] + j for i, j in enumerate(self.scores)]

        self.round_no += 1
        if self.round_no > len(self.data.rounds):
            self.current_round = None
            return

        self.current_round = RoundState(self.data.rounds[self.round_no], self.scores)
        self.event_no = 0

    def get_next_event(self):
        if self.current_round is None or self.event_no >= len(self.rounds[self.round_no].events):
            return None
        return self.rounds[self.round_no].events[self.event_no]

    def process_event(self):
        ev = self.get_next_event()
        if ev is not None:
            match type(ev):
                case TenhouDecoder.CallTileEvent:
                    self.current_round.call(ev)
                case TenhouDecoder.DoraIndicatorEvent:
                    self.current_round.dora(ev)
                case TenhouDecoder.DrawTileEvent:
                    self.current_round.draw_tile(ev)
                case TenhouDecoder.DiscardTileEvent:
                    self.current_round.discard_tile(ev)
                case TenhouDecoder.RiichiEvent:
                    self.current_round.riichi(ev)
                case _:
                    raise Exception(f"Event {ev.event_name} is not handled")

        self.event_no += 1

    def dump(self, readable=False):
        if self.current_round is not None:
            return self.current_round.serialize(readable=readable)
        return None


if __name__ == "__main__":
    import json

    h
    game_data = extract_bz2(h)

    state = GameState(game_data)

    a = []
    state.next_round()

    while state.get_next_event():
        state.process_event()
        a.append(state.dump(readable=True))

    with open("log2.json", "w") as f:
        json.dump(a, f, indent=2)
